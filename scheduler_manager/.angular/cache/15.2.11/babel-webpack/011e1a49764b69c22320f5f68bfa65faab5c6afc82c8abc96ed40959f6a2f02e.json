{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class CreateNewTaskComponent {\n  constructor(taskService, router, route) {\n    this.taskService = taskService;\n    this.router = router;\n    this.route = route;\n    this.formData = {\n      startDate: new Date(),\n      endDate: new Date(),\n      startHour: 0,\n      startMinute: 0,\n      duration: 0,\n      frequency: 'daily',\n      repeatInterval: 0\n    };\n    this.isEditMode = false;\n  }\n  ngOnInit() {\n    const taskId = this.route.snapshot.paramMap.get('id');\n    if (taskId) {\n      this.isEditMode = true;\n      this.loadTask(taskId);\n    }\n  }\n  loadTask(id) {\n    this.taskService.getTaskById(id).subscribe({\n      next: task => {\n        this.formData = {\n          startDate: new Date(task.startTime.split(' ')[0]),\n          endDate: new Date(task.endTime.split(' ')[0]),\n          startHour: new Date(task.startTime).getHours(),\n          startMinute: new Date(task.startTime).getMinutes(),\n          duration: parseInt(task.duration, 10),\n          frequency: 'daily',\n          repeatInterval: task.repeatInterval\n        };\n      },\n      error: err => console.error('Error loading task', err)\n    });\n    console.log('task', this.formData);\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval\n      } = this.formData;\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n      const tasks = this.generateTasks(startDate, endDate, startTime, endTime, duration, repeatInterval);\n      tasks.forEach(task => {\n        this.taskService.createTask(task).subscribe({\n          next: response => {\n            console.log('Task created', response);\n          },\n          error: error => console.error('Error creating task', error)\n        });\n      });\n      this.router.navigate(['/tasks']);\n    }\n  }\n  generateTasks(startDate, endDate, startTime, endTime, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n    while (currentDate <= end) {\n      tasks.push({\n        id: this.taskService.generateTaskId(),\n        startTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(startTime),\n        endTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(endTime),\n        duration: duration.toString() + ' min',\n        repeatInterval: repeatEvery\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    return tasks;\n  }\n  formatTime(date) {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  formatDateToYYYYMMDD(date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  static #_ = this.ɵfac = function CreateNewTaskComponent_Factory(t) {\n    return new (t || CreateNewTaskComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateNewTaskComponent,\n    selectors: [[\"app-create-new-task\"]],\n    decls: 47,\n    vars: 8,\n    consts: [[1, \"container\", \"mt-5\"], [3, \"ngSubmit\"], [\"taskForm\", \"ngForm\"], [1, \"form-group\"], [1, \"row\", \"mt-3\"], [\"for\", \"startDate\"], [1, \"col\"], [1, \"input-group\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"id\", \"startHour\", \"name\", \"startHour\", \"placeholder\", \"HH\", \"min\", \"0\", \"max\", \"23\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"id\", \"startMinute\", \"name\", \"startMinute\", \"placeholder\", \"MM\", \"min\", \"0\", \"max\", \"59\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"duration\"], [\"type\", \"number\", \"id\", \"duration\", \"name\", \"duration\", \"min\", \"1\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [1, \"me-4\"], [1, \"form-check\", \"ml-3\"], [\"type\", \"radio\", \"id\", \"daily\", \"name\", \"frequency\", \"value\", \"daily\", \"checked\", \"\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"daily\", 1, \"form-check-label\"], [\"type\", \"radio\", \"id\", \"weekly\", \"name\", \"frequency\", \"value\", \"weekly\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"weekly\", 1, \"form-check-label\"], [\"for\", \"repeatInterval\"], [\"type\", \"number\", \"id\", \"repeatInterval\", \"name\", \"repeatInterval\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-4\"]],\n    template: function CreateNewTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Start time and Occurrences\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateNewTaskComponent_Template_form_ngSubmit_3_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(4);\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Enter a date range\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.formData.startDate = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.formData.endDate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"div\", 7)(16, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.formData.startHour = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.formData.startMinute = $event;\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"label\", 12);\n        i0.ɵɵtext(20, \"Duration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 7)(22, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_22_listener($event) {\n          return ctx.formData.duration = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 14)(24, \"span\", 15);\n        i0.ɵɵtext(25, \"minutes\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(26, \"div\", 3)(27, \"label\", 16);\n        i0.ɵɵtext(28, \"Frequency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 17)(30, \"input\", 18);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_30_listener($event) {\n          return ctx.formData.frequency = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"label\", 19);\n        i0.ɵɵtext(32, \"Daily\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 17)(34, \"input\", 20);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_34_listener($event) {\n          return ctx.formData.frequency = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"label\", 21);\n        i0.ɵɵtext(36, \"Weekly\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"div\", 3)(38, \"label\", 22);\n        i0.ɵɵtext(39, \"Repeat every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 7)(41, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_41_listener($event) {\n          return ctx.formData.repeatInterval = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 14)(43, \"span\", 15);\n        i0.ɵɵtext(44, \"days\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(45, \"button\", 24);\n        i0.ɵɵtext(46, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.endDate);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startHour);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startMinute);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.duration);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.frequency);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.frequency);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.repeatInterval);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinValidator, i3.MaxValidator, i3.NgModel, i3.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["CreateNewTaskComponent","constructor","taskService","router","route","startDate","Date","endDate","startHour","startMinute","duration","frequency","repeatInterval","ngOnInit","taskId","snapshot","paramMap","get","isEditMode","loadTask","id","getTaskById","subscribe","next","task","formData","startTime","split","endTime","getHours","getMinutes","parseInt","error","err","console","log","onSubmit","form","valid","start","setHours","setMinutes","tasks","generateTasks","forEach","createTask","response","navigate","repeatEvery","currentDate","end","push","generateTaskId","formatDateToYYYYMMDD","formatTime","toString","setDate","getDate","date","hours","padStart","minutes","year","getFullYear","month","String","getMonth","day","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts","C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ITask } from 'src/interfaces/ITask';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent implements OnInit {\n  formData = {\n    startDate: new Date(),\n    endDate: new Date(),\n    startHour: 0,\n    startMinute: 0,\n    duration: 0,\n    frequency: 'daily',\n    repeatInterval: 0,\n  };\n\n  isEditMode = false;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n  ngOnInit(): void {\n    const taskId = this.route.snapshot.paramMap.get('id');\n    if (taskId) {\n      this.isEditMode = true;\n      this.loadTask(taskId);\n    }\n  }\n\n  loadTask(id: string): void {\n    this.taskService.getTaskById(id).subscribe({\n      next: (task) => {\n        this.formData = {\n          startDate: new Date(task.startTime.split(' ')[0]),\n          endDate: new Date(task.endTime.split(' ')[0]),\n          startHour: new Date(task.startTime).getHours(),\n          startMinute: new Date(task.startTime).getMinutes(),\n          duration: parseInt(task.duration, 10),\n          frequency: 'daily',\n          repeatInterval: task.repeatInterval,\n        };\n      },\n      error: (err) => console.error('Error loading task', err),\n    });\n    console.log('task', this.formData);\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval,\n      } = this.formData;\n\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n\n      const tasks = this.generateTasks(\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        duration,\n        repeatInterval\n      );\n\n      tasks.forEach((task) => {\n        this.taskService.createTask(task).subscribe({\n          next: (response) => {\n            console.log('Task created', response);\n          },\n          error: (error) => console.error('Error creating task', error),\n        });\n      });\n      this.router.navigate(['/tasks']);\n    }\n  }\n\n  generateTasks(\n    startDate: Date,\n    endDate: Date,\n    startTime: Date,\n    endTime: Date,\n    duration: number,\n    repeatEvery: number\n  ) {\n    const tasks: ITask[] = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n\n    while (currentDate <= end) {\n      tasks.push({\n        id: this.taskService.generateTaskId(),\n        startTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(startTime),\n        endTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(endTime),\n        duration: duration.toString() + ' min',\n        repeatInterval: repeatEvery,\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    return tasks;\n  }\n\n  formatTime(date: Date): string {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n\n  formatDateToYYYYMMDD(date: Date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n}\n","    <div class=\"container mt-5\">\n      <h2>Start time and Occurrences</h2>\n      <form #taskForm=\"ngForm\" (ngSubmit)=\"onSubmit(taskForm)\">\n        <div class=\"form-group\">\n          <div class=\"row mt-3\">\n            <label for=\"startDate\">Enter a date range</label>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  [(ngModel)]=\"formData.startDate\"\n                  class=\"form-control\"\n                />\n              </div>\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                name=\"endDate\"\n                [(ngModel)]=\"formData.endDate\"\n                class=\"form-control\"\n              />\n            </div>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"number\"\n                  id=\"startHour\"\n                  name=\"startHour\"\n                  [(ngModel)]=\"formData.startHour\"\n                  class=\"form-control\"\n                  placeholder=\"HH\"\n                  min=\"0\"\n                  max=\"23\"\n                />\n                <input\n                  type=\"number\"\n                  id=\"startMinute\"\n                  name=\"startMinute\"\n                  [(ngModel)]=\"formData.startMinute\"\n                  class=\"form-control\"\n                  placeholder=\"MM\"\n                  min=\"0\"\n                  max=\"59\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"duration\">Duration</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"duration\"\n              name=\"duration\"\n              [(ngModel)]=\"formData.duration\"\n              class=\"form-control\"\n              min=\"1\"\n              required\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">minutes</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"me-4\">Frequency</label>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"daily\"\n              name=\"frequency\"\n              [(ngModel)]=\"formData.frequency\"\n              value=\"daily\"\n              class=\"form-check-input\"\n              checked\n            />\n            <label for=\"daily\" class=\"form-check-label\">Daily</label>\n          </div>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"weekly\"\n              name=\"frequency\"\n              [(ngModel)]=\"formData.frequency\"\n              value=\"weekly\"\n              class=\"form-check-input\"\n            />\n            <label for=\"weekly\" class=\"form-check-label\">Weekly</label>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"repeatInterval\">Repeat every</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"repeatInterval\"\n              name=\"repeatInterval\"\n              [(ngModel)]=\"formData.repeatInterval\"\n              class=\"form-control\"\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">days</span>\n            </div>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary mt-4\">Submit</button>\n      </form>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}