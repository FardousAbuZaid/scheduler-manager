{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CreateNewTaskComponent = class CreateNewTaskComponent {\n  constructor(taskService, router, route) {\n    this.taskService = taskService;\n    this.router = router;\n    this.route = route;\n    this.formData = {\n      startDate: '',\n      endDate: '',\n      startHour: 0,\n      startMinute: 0,\n      duration: 0,\n      frequency: 'daily',\n      repeatInterval: 0\n    };\n    this.isEditMode = false;\n    this.taskId = null;\n  }\n  ngOnInit() {\n    this.taskId = this.route.snapshot.paramMap.get('id');\n    if (this.taskId) {\n      this.isEditMode = true;\n      this.loadTask(this.taskId);\n    }\n  }\n  loadTask(id) {\n    this.taskService.getTaskById(id).subscribe({\n      next: task => {\n        console.log('Loaded task:', task);\n        this.formData = {\n          startDate: this.formatDateToYYYYMMDD(new Date(task.startTime)),\n          endDate: this.formatDateToYYYYMMDD(new Date(task.endTime)),\n          startHour: new Date(task.startTime).getHours(),\n          startMinute: new Date(task.startTime).getMinutes(),\n          duration: parseInt(task.duration, 10),\n          frequency: 'daily',\n          repeatInterval: task.repeatInterval\n        };\n        this.taskId = id;\n      },\n      error: err => console.error('Error loading task', err)\n    });\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval\n      } = this.formData;\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n      const tasks = this.generateTasks(startDate, endDate, startTime, endTime, duration, repeatInterval);\n      if (this.isEditMode && this.taskId) {\n        tasks.forEach(task => {\n          this.taskService.updateTask(this.taskId, task).subscribe({\n            next: response => {\n              console.log('Task updated', response);\n            },\n            error: error => console.error('Error updating task', error)\n          });\n        });\n      } else {\n        tasks.forEach(task => {\n          this.taskService.createTask(task).subscribe({\n            next: response => {\n              console.log('Task created', response);\n            },\n            error: error => console.error('Error creating task', error)\n          });\n        });\n      }\n      this.router.navigate(['/tasks']);\n    }\n  }\n  generateTasks(startDate, endDate, startTime, endTime, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n    while (currentDate <= end) {\n      tasks.push({\n        id: this.isEditMode ? this.taskId || `task${new Date().getTime()}` : this.taskService.generateTaskId(),\n        startTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(startTime),\n        endTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(endTime),\n        duration: duration.toString() + ' min',\n        repeatInterval: repeatEvery\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    return tasks;\n  }\n  formatTime(date) {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  formatDateToYYYYMMDD(date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n};\nCreateNewTaskComponent = __decorate([Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css']\n})], CreateNewTaskComponent);\nexport { CreateNewTaskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAcjCC,YACUC,WAAwB,EACxBC,MAAc,EACdC,KAAqB;IAFrB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAhBf,aAAQ,GAAG;MACTC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,OAAO;MAClBC,cAAc,EAAE;KACjB;IAED,eAAU,GAAG,KAAK;IAClB,WAAM,GAAkB,IAAI;EAMzB;EACHC,QAAQ;IACN,IAAI,CAACC,MAAM,GAAG,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACpD,IAAI,IAAI,CAACH,MAAM,EAAE;MACf,IAAI,CAACI,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACL,MAAM,CAAC;;EAE9B;EAEAK,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACjB,WAAW,CAACkB,WAAW,CAACD,EAAE,CAAC,CAACE,SAAS,CAAC;MACzCC,IAAI,EAAGC,IAAI,IAAI;QACbC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC;QACjC,IAAI,CAACG,QAAQ,GAAG;UACdrB,SAAS,EAAE,IAAI,CAACsB,oBAAoB,CAAC,IAAIC,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC,CAAC;UAC9DvB,OAAO,EAAE,IAAI,CAACqB,oBAAoB,CAAC,IAAIC,IAAI,CAACL,IAAI,CAACO,OAAO,CAAC,CAAC;UAC1DvB,SAAS,EAAE,IAAIqB,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC,CAACE,QAAQ,EAAE;UAC9CvB,WAAW,EAAE,IAAIoB,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC,CAACG,UAAU,EAAE;UAClDvB,QAAQ,EAAEwB,QAAQ,CAACV,IAAI,CAACd,QAAQ,EAAE,EAAE,CAAC;UACrCC,SAAS,EAAE,OAAO;UAClBC,cAAc,EAAEY,IAAI,CAACZ;SACtB;QACD,IAAI,CAACE,MAAM,GAAGM,EAAE;MAClB,CAAC;MACDe,KAAK,EAAGC,GAAG,IAAKX,OAAO,CAACU,KAAK,CAAC,oBAAoB,EAAEC,GAAG;KACxD,CAAC;EACJ;EAEAC,QAAQ,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd,MAAM;QACJjC,SAAS;QACTC,OAAO;QACPC,SAAS;QACTC,WAAW;QACXC,QAAQ;QACRC,SAAS;QACTC;MAAc,CACf,GAAG,IAAI,CAACe,QAAQ;MAEjB,MAAMa,KAAK,GAAG,IAAIX,IAAI,CAACvB,SAAS,CAAC;MACjC,MAAMwB,SAAS,GAAG,IAAID,IAAI,CAACW,KAAK,CAAC;MACjCV,SAAS,CAACW,QAAQ,CAACjC,SAAS,CAAC;MAC7BsB,SAAS,CAACY,UAAU,CAACjC,WAAW,CAAC;MACjC,MAAMsB,OAAO,GAAG,IAAIF,IAAI,CAACC,SAAS,CAAC;MACnCC,OAAO,CAACW,UAAU,CAACZ,SAAS,CAACG,UAAU,EAAE,GAAGvB,QAAQ,CAAC;MAErD,MAAMiC,KAAK,GAAG,IAAI,CAACC,aAAa,CAC9BtC,SAAS,EACTC,OAAO,EACPuB,SAAS,EACTC,OAAO,EACPrB,QAAQ,EACRE,cAAc,CACf;MAED,IAAI,IAAI,CAACM,UAAU,IAAI,IAAI,CAACJ,MAAM,EAAE;QAClC6B,KAAK,CAACE,OAAO,CAAErB,IAAI,IAAI;UACrB,IAAI,CAACrB,WAAW,CAAC2C,UAAU,CAAC,IAAI,CAAChC,MAAO,EAAEU,IAAI,CAAC,CAACF,SAAS,CAAC;YACxDC,IAAI,EAAGwB,QAAQ,IAAI;cACjBtB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEqB,QAAQ,CAAC;YACvC,CAAC;YACDZ,KAAK,EAAGA,KAAK,IAAKV,OAAO,CAACU,KAAK,CAAC,qBAAqB,EAAEA,KAAK;WAC7D,CAAC;QACJ,CAAC,CAAC;OACH,MAAM;QACLQ,KAAK,CAACE,OAAO,CAAErB,IAAI,IAAI;UACrB,IAAI,CAACrB,WAAW,CAAC6C,UAAU,CAACxB,IAAI,CAAC,CAACF,SAAS,CAAC;YAC1CC,IAAI,EAAGwB,QAAQ,IAAI;cACjBtB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEqB,QAAQ,CAAC;YACvC,CAAC;YACDZ,KAAK,EAAGA,KAAK,IAAKV,OAAO,CAACU,KAAK,CAAC,qBAAqB,EAAEA,KAAK;WAC7D,CAAC;QACJ,CAAC,CAAC;;MAEJ,IAAI,CAAC/B,MAAM,CAAC6C,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEAL,aAAa,CACXtC,SAAiB,EACjBC,OAAe,EACfuB,SAAe,EACfC,OAAa,EACbrB,QAAgB,EAChBwC,WAAmB;IAEnB,MAAMP,KAAK,GAAY,EAAE;IACzB,IAAIQ,WAAW,GAAG,IAAItB,IAAI,CAACvB,SAAS,CAAC;IACrC,IAAI8C,GAAG,GAAG,IAAIvB,IAAI,CAACtB,OAAO,CAAC;IAE3B,OAAO4C,WAAW,IAAIC,GAAG,EAAE;MACzBT,KAAK,CAACU,IAAI,CAAC;QACTjC,EAAE,EAAE,IAAI,CAACF,UAAU,GACf,IAAI,CAACJ,MAAM,IAAI,OAAO,IAAIe,IAAI,EAAE,CAACyB,OAAO,EAAE,EAAE,GAC5C,IAAI,CAACnD,WAAW,CAACoD,cAAc,EAAE;QACrCzB,SAAS,EACP,IAAI,CAACF,oBAAoB,CAACuB,WAAW,CAAC,GACtC,GAAG,GACH,IAAI,CAACK,UAAU,CAAC1B,SAAS,CAAC;QAC5BC,OAAO,EACL,IAAI,CAACH,oBAAoB,CAACuB,WAAW,CAAC,GACtC,GAAG,GACH,IAAI,CAACK,UAAU,CAACzB,OAAO,CAAC;QAC1BrB,QAAQ,EAAEA,QAAQ,CAAC+C,QAAQ,EAAE,GAAG,MAAM;QACtC7C,cAAc,EAAEsC;OACjB,CAAC;MACFC,WAAW,CAACO,OAAO,CAACP,WAAW,CAACQ,OAAO,EAAE,GAAGT,WAAW,CAAC;;IAE1D,OAAOP,KAAK;EACd;EAEAa,UAAU,CAACI,IAAU;IACnB,MAAMC,KAAK,GAAGD,IAAI,CAAC5B,QAAQ,EAAE,CAACyB,QAAQ,EAAE,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACzD,MAAMC,OAAO,GAAGH,IAAI,CAAC3B,UAAU,EAAE,CAACwB,QAAQ,EAAE,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC7D,OAAO,GAAGD,KAAK,IAAIE,OAAO,EAAE;EAC9B;EAEAnC,oBAAoB,CAACgC,IAAU;IAC7BA,IAAI,GAAG,IAAI/B,IAAI,CAAC+B,IAAI,CAAC;IACrB,MAAMI,IAAI,GAAGJ,IAAI,CAACK,WAAW,EAAE;IAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACP,IAAI,CAACQ,QAAQ,EAAE,GAAG,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMO,GAAG,GAAGF,MAAM,CAACP,IAAI,CAACD,OAAO,EAAE,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,OAAO,GAAGE,IAAI,IAAIE,KAAK,IAAIG,GAAG,EAAE;EAClC;CACD;AA/IYpE,sBAAsB,eALlCD,SAAS,CAAC;EACTsE,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWvE,sBAAsB,CA+IlC;SA/IYA,sBAAsB","names":["Component","CreateNewTaskComponent","constructor","taskService","router","route","startDate","endDate","startHour","startMinute","duration","frequency","repeatInterval","ngOnInit","taskId","snapshot","paramMap","get","isEditMode","loadTask","id","getTaskById","subscribe","next","task","console","log","formData","formatDateToYYYYMMDD","Date","startTime","endTime","getHours","getMinutes","parseInt","error","err","onSubmit","form","valid","start","setHours","setMinutes","tasks","generateTasks","forEach","updateTask","response","createTask","navigate","repeatEvery","currentDate","end","push","getTime","generateTaskId","formatTime","toString","setDate","getDate","date","hours","padStart","minutes","year","getFullYear","month","String","getMonth","day","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ITask } from 'src/interfaces/ITask';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent implements OnInit {\n  formData = {\n    startDate: '',\n    endDate: '',\n    startHour: 0,\n    startMinute: 0,\n    duration: 0,\n    frequency: 'daily',\n    repeatInterval: 0,\n  };\n\n  isEditMode = false;\n  taskId: string | null = null;\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n  ngOnInit(): void {\n    this.taskId = this.route.snapshot.paramMap.get('id');\n    if (this.taskId) {\n      this.isEditMode = true;\n      this.loadTask(this.taskId);\n    }\n  }\n\n  loadTask(id: string): void {\n    this.taskService.getTaskById(id).subscribe({\n      next: (task) => {\n        console.log('Loaded task:', task);\n        this.formData = {\n          startDate: this.formatDateToYYYYMMDD(new Date(task.startTime)),\n          endDate: this.formatDateToYYYYMMDD(new Date(task.endTime)),\n          startHour: new Date(task.startTime).getHours(),\n          startMinute: new Date(task.startTime).getMinutes(),\n          duration: parseInt(task.duration, 10),\n          frequency: 'daily',\n          repeatInterval: task.repeatInterval,\n        };\n        this.taskId = id;\n      },\n      error: (err) => console.error('Error loading task', err),\n    });\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval,\n      } = this.formData;\n\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n\n      const tasks = this.generateTasks(\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        duration,\n        repeatInterval\n      );\n\n      if (this.isEditMode && this.taskId) {\n        tasks.forEach((task) => {\n          this.taskService.updateTask(this.taskId!, task).subscribe({\n            next: (response) => {\n              console.log('Task updated', response);\n            },\n            error: (error) => console.error('Error updating task', error),\n          });\n        });\n      } else {\n        tasks.forEach((task) => {\n          this.taskService.createTask(task).subscribe({\n            next: (response) => {\n              console.log('Task created', response);\n            },\n            error: (error) => console.error('Error creating task', error),\n          });\n        });\n      }\n      this.router.navigate(['/tasks']);\n    }\n  }\n\n  generateTasks(\n    startDate: string,\n    endDate: string,\n    startTime: Date,\n    endTime: Date,\n    duration: number,\n    repeatEvery: number\n  ): ITask[] {\n    const tasks: ITask[] = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n\n    while (currentDate <= end) {\n      tasks.push({\n        id: this.isEditMode\n          ? this.taskId || `task${new Date().getTime()}`\n          : this.taskService.generateTaskId(),\n        startTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(startTime),\n        endTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(endTime),\n        duration: duration.toString() + ' min',\n        repeatInterval: repeatEvery,\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    return tasks;\n  }\n\n  formatTime(date: Date): string {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n\n  formatDateToYYYYMMDD(date: Date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}