{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class CreateNewTaskComponent {\n  constructor(taskService, router) {\n    this.taskService = taskService;\n    this.router = router;\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const formData = form.value;\n      const startDate = formData.startDate;\n      const endDate = formData.endDate;\n      const startHour = formData.startHour;\n      const startMinute = formData.startMinute;\n      const duration = formData.duration;\n      const repeatEvery = formData.repeatInterval;\n      console.log('hello', formData);\n      const tasks = this.generateTasks(startDate, endDate, startHour, startMinute, duration, repeatEvery);\n      // this.taskService.createTask(task).subscribe({\n      //   next: (response) => {\n      //     console.log('Task created', response);\n      //     this.router.navigate(['/tasks']);\n      //   },\n      //   error: (error) => console.error('Error creating task', error),\n      // });\n    }\n  }\n\n  getEndTime(startTime, duration) {\n    const result = new Date(startTime);\n    result.setMinutes(result.getMinutes() + duration);\n    return result;\n  }\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1, date2) {\n    return date1 < date2;\n  }\n  generateTasks(startDate, endDate, startHour, startMinute, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = startDate;\n    console.log('startDate', currentDate);\n    const startTime = new Date(`${String(startHour).padStart(2, '0')}:${String(startMinute).padStart(2, '0')}`);\n    const endTime = this.getEndTime(startTime, duration);\n    while (this.isBefore(currentDate, endDate) || currentDate.toDateString() === endDate.toDateString()) {\n      tasks.push({\n        id: `task${new Date().getTime()}`,\n        startTime: startTime,\n        endTime: endTime,\n        duration: duration\n      });\n      currentDate = this.addDays(currentDate, repeatEvery);\n    }\n  }\n  static #_ = this.ɵfac = function CreateNewTaskComponent_Factory(t) {\n    return new (t || CreateNewTaskComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateNewTaskComponent,\n    selectors: [[\"app-create-new-task\"]],\n    decls: 47,\n    vars: 0,\n    consts: [[1, \"container\", \"mt-5\"], [3, \"ngSubmit\"], [\"taskForm\", \"ngForm\"], [1, \"form-group\"], [1, \"row\", \"mt-3\"], [\"for\", \"startDate\"], [1, \"col\"], [1, \"input-group\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", 1, \"form-control\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", 1, \"form-control\"], [\"type\", \"number\", \"id\", \"startHour\", \"name\", \"startHour\", \"placeholder\", \"HH\", \"min\", \"0\", \"max\", \"23\", 1, \"form-control\"], [\"type\", \"number\", \"id\", \"startMinute\", \"name\", \"startMinute\", \"placeholder\", \"MM\", \"min\", \"0\", \"max\", \"59\", 1, \"form-control\"], [\"for\", \"duration\"], [\"type\", \"number\", \"id\", \"duration\", \"name\", \"duration\", \"min\", \"1\", \"required\", \"\", 1, \"form-control\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [1, \"me-4\"], [1, \"form-check\", \"ml-3\"], [\"type\", \"radio\", \"id\", \"daily\", \"name\", \"frequency\", \"value\", \"daily\", \"checked\", \"\", 1, \"form-check-input\"], [\"for\", \"daily\", 1, \"form-check-label\"], [\"type\", \"radio\", \"id\", \"weekly\", \"name\", \"frequency\", \"value\", \"weekly\", 1, \"form-check-input\"], [\"for\", \"weekly\", 1, \"form-check-label\"], [\"for\", \"repeatInterval\"], [\"type\", \"number\", \"id\", \"repeatInterval\", \"name\", \"repeatInterval\", \"min\", \"1\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-4\"]],\n    template: function CreateNewTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Start time and Occurrences\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateNewTaskComponent_Template_form_ngSubmit_3_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(4);\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Enter a date range\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7);\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelement(13, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"div\", 7);\n        i0.ɵɵelement(16, \"input\", 10)(17, \"input\", 11);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"label\", 12);\n        i0.ɵɵtext(20, \"Duration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 7);\n        i0.ɵɵelement(22, \"input\", 13);\n        i0.ɵɵelementStart(23, \"div\", 14)(24, \"span\", 15);\n        i0.ɵɵtext(25, \"minutes\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(26, \"div\", 3)(27, \"label\", 16);\n        i0.ɵɵtext(28, \"Frequency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 17);\n        i0.ɵɵelement(30, \"input\", 18);\n        i0.ɵɵelementStart(31, \"label\", 19);\n        i0.ɵɵtext(32, \"Daily\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 17);\n        i0.ɵɵelement(34, \"input\", 20);\n        i0.ɵɵelementStart(35, \"label\", 21);\n        i0.ɵɵtext(36, \"Weekly\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"div\", 3)(38, \"label\", 22);\n        i0.ɵɵtext(39, \"Repeat every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 7);\n        i0.ɵɵelement(41, \"input\", 23);\n        i0.ɵɵelementStart(42, \"div\", 14)(43, \"span\", 15);\n        i0.ɵɵtext(44, \"days\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(45, \"button\", 24);\n        i0.ɵɵtext(46, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["CreateNewTaskComponent","constructor","taskService","router","onSubmit","form","valid","formData","value","startDate","endDate","startHour","startMinute","duration","repeatEvery","repeatInterval","console","log","tasks","generateTasks","getEndTime","startTime","result","Date","setMinutes","getMinutes","addDays","date","days","setDate","getDate","isBefore","date1","date2","currentDate","String","padStart","endTime","toDateString","push","id","getTime","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts","C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ITask } from 'src/interfaces/ITask';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent {\n  constructor(private taskService: TaskService, private router: Router) {}\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const formData = form.value;\n\n      const startDate = formData.startDate;\n      const endDate = formData.endDate;\n      const startHour = formData.startHour;\n      const startMinute = formData.startMinute;\n      const duration = formData.duration;\n      const repeatEvery = formData.repeatInterval;\nconsole.log('hello',formData);\n      const tasks = this.generateTasks(\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        repeatEvery\n      );\n      \n      // this.taskService.createTask(task).subscribe({\n      //   next: (response) => {\n      //     console.log('Task created', response);\n      //     this.router.navigate(['/tasks']);\n      //   },\n      //   error: (error) => console.error('Error creating task', error),\n      // });\n    }\n  }\n\n  getEndTime(startTime: Date, duration: number): Date {\n    const result = new Date(startTime);\n    result.setMinutes(result.getMinutes() + duration);\n    return result;\n  }\n  addDays(date: Date, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1: Date, date2: Date): boolean {\n    return date1 < date2;\n  }\n\n  generateTasks(\n    startDate: Date,\n    endDate: Date,\n    startHour: number,\n    startMinute: number,\n    duration: number,\n    repeatEvery: number\n  ) {\n    const tasks: ITask[] = [];\n    let currentDate = startDate;\n    console.log('startDate', currentDate);\n    const startTime = new Date(\n      `${String(startHour).padStart(2, '0')}:${String(startMinute).padStart(\n        2,\n        '0'\n      )}`\n    );\n\n    const endTime = this.getEndTime(startTime, duration);\n\n    while (\n      this.isBefore(currentDate, endDate) ||\n      currentDate.toDateString() === endDate.toDateString()\n    ) {\n      tasks.push({\n        id: `task${new Date().getTime()}`, // Generate a unique ID\n        startTime: startTime,\n        endTime: endTime,\n        duration: duration,\n      });\n      currentDate = this.addDays(currentDate, repeatEvery);\n    }\n  }\n}\n","    <div class=\"container mt-5\">\n      <h2>Start time and Occurrences</h2>\n      <form #taskForm=\"ngForm\" (ngSubmit)=\"onSubmit(taskForm)\">\n        <div class=\"form-group\">\n          <div class=\"row mt-3\">\n            <label for=\"startDate\">Enter a date range</label>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  class=\"form-control\"\n                />\n              </div>\n            </div>\n\n            <div class=\"col\">\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                name=\"endDate\"\n                class=\"form-control\"\n              />\n            </div>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"number\"\n                  id=\"startHour\"\n                  name=\"startHour\"\n                  class=\"form-control\"\n                  placeholder=\"HH\"\n                  min=\"0\"\n                  max=\"23\"\n                />\n                <input\n                  type=\"number\"\n                  id=\"startMinute\"\n                  name=\"startMinute\"\n                  class=\"form-control\"\n                  placeholder=\"MM\"\n                  min=\"0\"\n                  max=\"59\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"duration\">Duration</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"duration\"\n              name=\"duration\"\n              class=\"form-control\"\n              min=\"1\"\n              required\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">minutes</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"me-4\">Frequency</label>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"daily\"\n              name=\"frequency\"\n              value=\"daily\"\n              class=\"form-check-input\"\n              checked\n            />\n            <label for=\"daily\" class=\"form-check-label\">Daily</label>\n          </div>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"weekly\"\n              name=\"frequency\"\n              value=\"weekly\"\n              class=\"form-check-input\"\n            />\n            <label for=\"weekly\" class=\"form-check-label\">Weekly</label>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"repeatInterval\">Repeat every</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"repeatInterval\"\n              name=\"repeatInterval\"\n              class=\"form-control\"\n              min=\"1\"\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">days</span>\n            </div>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary mt-4\">Submit</button>\n      </form>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}