{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/tasks';\n  }\n  getTasks() {\n    return this.http.get(this.apiUrl);\n  }\n  getTaskById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createTask(taskData) {\n    return this.http.post(this.apiUrl, taskData);\n  }\n  updateTask(id, taskData) {\n    return this.http.put(`${this.apiUrl}/${id}`, taskData);\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,iCAAiC;EACX;EAEvCC,QAAQ;IACN,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC;EAC1C;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACrD;EAEAC,UAAU,CAACC,QAAa;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,IAAI,CAACL,MAAM,EAAEI,QAAQ,CAAC;EACnD;EAEAE,UAAU,CAACJ,EAAU,EAAEE,QAAa;IAClC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC7D;EAAC;qBAlBUT,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAa,SAAXb,WAAW;IAAAc,YAFV;EAAM","names":["TaskService","constructor","http","getTasks","get","apiUrl","getTaskById","id","createTask","taskData","post","updateTask","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ITask } from 'src/interfaces/ITask';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  private apiUrl = 'http://localhost:8080/api/tasks';\n  constructor(private http: HttpClient) {}\n\n  getTasks(): Observable<any[]> {\n    return this.http.get<any[]>(this.apiUrl);\n  }\n\n  getTaskById(id: string): Observable<any> {\n    return this.http.get<Itask>(`${this.apiUrl}/${id}`);\n  }\n\n  createTask(taskData: any): Observable<any> {\n    return this.http.post<any>(this.apiUrl, taskData);\n  }\n\n  updateTask(id: string, taskData: any): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/${id}`, taskData);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}