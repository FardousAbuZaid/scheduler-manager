{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class CreateNewTaskComponent {\n  constructor(taskService, router) {\n    this.taskService = taskService;\n    this.router = router;\n    this.formData = {\n      startDate: new Date(),\n      endDate: new Date(),\n      startHour: 0,\n      startMinute: 0,\n      duration: 0,\n      frequency: 'daily',\n      repeatInterval: 1\n    };\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval\n      } = this.formData;\n      // Convert form values to Date objects\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      // Set hours and minutes for the start time\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      // Calculate end time based on duration\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n      console.log('Start Time:', this.formatTime(startTime));\n      console.log('End Time:', this.formatTime(endTime));\n      console.log('Duration:', duration);\n      console.log('Frequency:', frequency);\n      console.log('Repeat Every:', repeatInterval);\n      const tasks = this.generateTasks(startDate, endDate, startTime, endTime, duration, repeatInterval);\n      console.log('tasks', tasks);\n      // this.taskService.createTask(task).subscribe({\n      //   next: (response) => {\n      //     console.log('Task created', response);\n      //     this.router.navigate(['/tasks']);\n      //   },\n      //   error: (error) => console.error('Error creating task', error),\n      // });\n    }\n  }\n\n  formatTime(date) {\n    // Format hours and minutes as HH:mm\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  getEndTime(startTime, duration) {\n    const result = new Date(startTime);\n    result.setMinutes(result.getMinutes() + duration);\n    return result;\n  }\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1, date2) {\n    return date1 < date2;\n  }\n  generateTasks(startDate, endDate, startTime, endTime, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = new Date(startDate);\n    console.log('start', startTime);\n    console.log('end', endTime);\n    while (currentDate <= endDate) {\n      let taskStart = new Date(currentDate);\n      taskStart.setHours(startTime.getHours());\n      taskStart.setMinutes(startTime.getMinutes());\n      let taskEnd = new Date(taskStart);\n      taskEnd.setMinutes(taskStart.getMinutes() + duration);\n      tasks.push({\n        id: `task${new Date().getTime()}`,\n        startTime: startTime,\n        endTime: endTime,\n        duration: duration\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n  }\n  static #_ = this.ɵfac = function CreateNewTaskComponent_Factory(t) {\n    return new (t || CreateNewTaskComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateNewTaskComponent,\n    selectors: [[\"app-create-new-task\"]],\n    decls: 47,\n    vars: 8,\n    consts: [[1, \"container\", \"mt-5\"], [3, \"ngSubmit\"], [\"taskForm\", \"ngForm\"], [1, \"form-group\"], [1, \"row\", \"mt-3\"], [\"for\", \"startDate\"], [1, \"col\"], [1, \"input-group\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"id\", \"startHour\", \"name\", \"startHour\", \"placeholder\", \"HH\", \"min\", \"0\", \"max\", \"23\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"id\", \"startMinute\", \"name\", \"startMinute\", \"placeholder\", \"MM\", \"min\", \"0\", \"max\", \"59\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"duration\"], [\"type\", \"number\", \"id\", \"duration\", \"name\", \"duration\", \"min\", \"1\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [1, \"me-4\"], [1, \"form-check\", \"ml-3\"], [\"type\", \"radio\", \"id\", \"daily\", \"name\", \"frequency\", \"value\", \"daily\", \"checked\", \"\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"daily\", 1, \"form-check-label\"], [\"type\", \"radio\", \"id\", \"weekly\", \"name\", \"frequency\", \"value\", \"weekly\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"weekly\", 1, \"form-check-label\"], [\"for\", \"repeatInterval\"], [\"type\", \"number\", \"id\", \"repeatInterval\", \"name\", \"repeatInterval\", \"min\", \"1\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-4\"]],\n    template: function CreateNewTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Start time and Occurrences\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateNewTaskComponent_Template_form_ngSubmit_3_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(4);\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Enter a date range\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.formData.startDate = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.formData.endDate = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"div\", 7)(16, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.formData.startHour = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.formData.startMinute = $event;\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(18, \"div\", 3)(19, \"label\", 12);\n        i0.ɵɵtext(20, \"Duration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 7)(22, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_22_listener($event) {\n          return ctx.formData.duration = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 14)(24, \"span\", 15);\n        i0.ɵɵtext(25, \"minutes\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(26, \"div\", 3)(27, \"label\", 16);\n        i0.ɵɵtext(28, \"Frequency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 17)(30, \"input\", 18);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_30_listener($event) {\n          return ctx.formData.frequency = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"label\", 19);\n        i0.ɵɵtext(32, \"Daily\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 17)(34, \"input\", 20);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_34_listener($event) {\n          return ctx.formData.frequency = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"label\", 21);\n        i0.ɵɵtext(36, \"Weekly\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"div\", 3)(38, \"label\", 22);\n        i0.ɵɵtext(39, \"Repeat every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"div\", 7)(41, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateNewTaskComponent_Template_input_ngModelChange_41_listener($event) {\n          return ctx.formData.repeatInterval = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 14)(43, \"span\", 15);\n        i0.ɵɵtext(44, \"days\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(45, \"button\", 24);\n        i0.ɵɵtext(46, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.endDate);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startHour);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.startMinute);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.duration);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.frequency);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.frequency);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.formData.repeatInterval);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinValidator, i3.MaxValidator, i3.NgModel, i3.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["CreateNewTaskComponent","constructor","taskService","router","startDate","Date","endDate","startHour","startMinute","duration","frequency","repeatInterval","onSubmit","form","valid","formData","start","end","startTime","setHours","setMinutes","endTime","getMinutes","console","log","formatTime","tasks","generateTasks","date","hours","getHours","toString","padStart","minutes","getEndTime","result","addDays","days","setDate","getDate","isBefore","date1","date2","repeatEvery","currentDate","taskStart","taskEnd","push","id","getTime","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts","C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ITask } from 'src/interfaces/ITask';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent {\n  constructor(private taskService: TaskService, private router: Router) {}\n  formData = {\n    startDate: new Date(),\n    endDate: new Date(),\n    startHour: 0,\n    startMinute: 0,\n    duration: 0,\n    frequency: 'daily',\n    repeatInterval: 1,\n  };\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval,\n      } = this.formData;\n\n      // Convert form values to Date objects\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n\n      // Set hours and minutes for the start time\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      // Calculate end time based on duration\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n\n      console.log('Start Time:', this.formatTime(startTime));\n      console.log('End Time:', this.formatTime(endTime));\n      console.log('Duration:', duration);\n      console.log('Frequency:', frequency);\n      console.log('Repeat Every:', repeatInterval);\n\n      const tasks = this.generateTasks(\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        duration,\n        repeatInterval\n      );\n      console.log('tasks', tasks);\n\n      // this.taskService.createTask(task).subscribe({\n      //   next: (response) => {\n      //     console.log('Task created', response);\n      //     this.router.navigate(['/tasks']);\n      //   },\n      //   error: (error) => console.error('Error creating task', error),\n      // });\n    }\n  }\n\n  formatTime(date: Date): string {\n    // Format hours and minutes as HH:mm\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n\n  getEndTime(startTime: Date, duration: number): Date {\n    const result = new Date(startTime);\n    result.setMinutes(result.getMinutes() + duration);\n    return result;\n  }\n  addDays(date: Date, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1: Date, date2: Date): boolean {\n    return date1 < date2;\n  }\n\n  generateTasks(\n    startDate: Date,\n    endDate: Date,\n    startTime: Date,\n    endTime: Date,\n    duration: number,\n    repeatEvery: number\n  ) {\n    const tasks: ITask[] = [];\n    let currentDate = new Date(startDate);\n\n    console.log('start', startTime);\n    console.log('end', endTime);\n\n    while (currentDate <= endDate) {\n      let taskStart = new Date(currentDate);\n      taskStart.setHours(startTime.getHours());\n      taskStart.setMinutes(startTime.getMinutes());\n\n      let taskEnd = new Date(taskStart);\n      taskEnd.setMinutes(taskStart.getMinutes() + duration);\n\n      tasks.push({\n        id: `task${new Date().getTime()}`, // Generate a unique ID\n        startTime: startTime,\n        endTime: endTime,\n        duration: duration,\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n  }\n  console.log('Generated Tasks:', tasks);\n}\n","    <div class=\"container mt-5\">\n      <h2>Start time and Occurrences</h2>\n      <form #taskForm=\"ngForm\" (ngSubmit)=\"onSubmit(taskForm)\">\n        <div class=\"form-group\">\n          <div class=\"row mt-3\">\n            <label for=\"startDate\">Enter a date range</label>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  [(ngModel)]=\"formData.startDate\"\n                  class=\"form-control\"\n                />\n              </div>\n            </div>\n            <div class=\"col\">\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                name=\"endDate\"\n                [(ngModel)]=\"formData.endDate\"\n                class=\"form-control\"\n              />\n            </div>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"number\"\n                  id=\"startHour\"\n                  name=\"startHour\"\n                  [(ngModel)]=\"formData.startHour\"\n                  class=\"form-control\"\n                  placeholder=\"HH\"\n                  min=\"0\"\n                  max=\"23\"\n                />\n                <input\n                  type=\"number\"\n                  id=\"startMinute\"\n                  name=\"startMinute\"\n                  [(ngModel)]=\"formData.startMinute\"\n                  class=\"form-control\"\n                  placeholder=\"MM\"\n                  min=\"0\"\n                  max=\"59\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"duration\">Duration</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"duration\"\n              name=\"duration\"\n              [(ngModel)]=\"formData.duration\"\n              class=\"form-control\"\n              min=\"1\"\n              required\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">minutes</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"me-4\">Frequency</label>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"daily\"\n              name=\"frequency\"\n              [(ngModel)]=\"formData.frequency\"\n              value=\"daily\"\n              class=\"form-check-input\"\n              checked\n            />\n            <label for=\"daily\" class=\"form-check-label\">Daily</label>\n          </div>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"weekly\"\n              name=\"frequency\"\n              [(ngModel)]=\"formData.frequency\"\n              value=\"weekly\"\n              class=\"form-check-input\"\n            />\n            <label for=\"weekly\" class=\"form-check-label\">Weekly</label>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"repeatInterval\">Repeat every</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"repeatInterval\"\n              name=\"repeatInterval\"\n              [(ngModel)]=\"formData.repeatInterval\"\n              class=\"form-control\"\n              min=\"1\"\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">days</span>\n            </div>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary mt-4\">Submit</button>\n      </form>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}