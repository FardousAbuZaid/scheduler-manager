{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CalenderComponent = class CalenderComponent {\n  constructor(modalService) {\n    this.modalService = modalService;\n    this.currentMonth = new Date();\n    this.calendar = [];\n    this.selectedDay = null;\n  }\n  ngOnInit() {\n    this.generateCalendar();\n  }\n  generateCalendar() {\n    const startOfMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth(), 1);\n    const endOfMonth = new Date(this.currentMonth.getFullYear(), this.currentMonth.getMonth() + 1, 0);\n    const calendar = [];\n    let week = [];\n    let currentDate = new Date(startOfMonth);\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n    while (currentDate <= endOfMonth || currentDate.getDay() !== 0) {\n      week.push({\n        date: new Date(currentDate),\n        tasks: this.getTasksForDay(currentDate) // fetch tasks for this day\n      });\n\n      if (currentDate.getDay() === 6) {\n        calendar.push(week);\n        week = [];\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    this.calendar = calendar;\n  }\n  getTasksForDay(date) {\n    // Dummy tasks, replace with actual task data\n    const tasks = [{\n      title: 'Task 1',\n      startTime: '10:00',\n      endTime: '11:00'\n    }, {\n      title: 'Task 2',\n      startTime: '12:00',\n      endTime: '13:00'\n    }];\n    // For simplicity, we'll assume all tasks occur on the 15th of the month\n    if (date.getDate() === 15) {\n      return tasks;\n    }\n    return [];\n  }\n  prevMonth() {\n    this.currentMonth.setMonth(this.currentMonth.getMonth() - 1);\n    this.generateCalendar();\n  }\n  nextMonth() {\n    this.currentMonth.setMonth(this.currentMonth.getMonth() + 1);\n    this.generateCalendar();\n  }\n  isToday(date) {\n    const today = new Date();\n    return today.getDate() === date.date.getDate() && today.getMonth() === date.date.getMonth() && today.getFullYear() === date.date.getFullYear();\n  }\n  openDayModal(day) {\n    this.selectedDay = day;\n    this.modalService.open(document.getElementById('taskModal'), {\n      ariaLabelledBy: 'taskModalLabel'\n    });\n  }\n};\nCalenderComponent = __decorate([Component({\n  selector: 'app-calender',\n  templateUrl: './calender.component.html',\n  styleUrls: ['./calender.component.css']\n})], CalenderComponent);\nexport { CalenderComponent };","map":{"version":3,"mappings":"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","names":["Component","CalenderComponent","constructor","modalService","Date","ngOnInit","generateCalendar","startOfMonth","currentMonth","getFullYear","getMonth","endOfMonth","calendar","week","currentDate","setDate","getDate","getDay","push","date","tasks","getTasksForDay","title","startTime","endTime","prevMonth","setMonth","nextMonth","isToday","today","openDayModal","day","selectedDay","open","document","getElementById","ariaLabelledBy","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\calender\\calender.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n\ninterface Task {\n  title: string;\n  startTime: string;\n  endTime: string;\n}\n\ninterface Day {\n  date: Date;\n  tasks: Task[];\n}\n\n@Component({\n  selector: 'app-calender',\n  templateUrl: './calender.component.html',\n  styleUrls: ['./calender.component.css'],\n})\nexport class CalenderComponent implements OnInit {\n  currentMonth: Date = new Date();\n  calendar: Day[][] = [];\n  selectedDay: Day | null = null;\n\n  constructor(private modalService: NgbModal) {}\n\n  ngOnInit(): void {\n    this.generateCalendar();\n  }\n\n  generateCalendar(): void {\n    const startOfMonth = new Date(\n      this.currentMonth.getFullYear(),\n      this.currentMonth.getMonth(),\n      1\n    );\n    const endOfMonth = new Date(\n      this.currentMonth.getFullYear(),\n      this.currentMonth.getMonth() + 1,\n      0\n    );\n\n    const calendar: Day[][] = [];\n    let week: Day[] = [];\n    let currentDate = new Date(startOfMonth);\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    while (currentDate <= endOfMonth || currentDate.getDay() !== 0) {\n      week.push({\n        date: new Date(currentDate),\n        tasks: this.getTasksForDay(currentDate), // fetch tasks for this day\n      });\n\n      if (currentDate.getDay() === 6) {\n        calendar.push(week);\n        week = [];\n      }\n\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    this.calendar = calendar;\n  }\n\n  getTasksForDay(date: Date): Task[] {\n    // Dummy tasks, replace with actual task data\n    const tasks: Task[] = [\n      { title: 'Task 1', startTime: '10:00', endTime: '11:00' },\n      { title: 'Task 2', startTime: '12:00', endTime: '13:00' },\n    ];\n\n    // For simplicity, we'll assume all tasks occur on the 15th of the month\n    if (date.getDate() === 15) {\n      return tasks;\n    }\n\n    return [];\n  }\n\n  prevMonth(): void {\n    this.currentMonth.setMonth(this.currentMonth.getMonth() - 1);\n    this.generateCalendar();\n  }\n\n  nextMonth(): void {\n    this.currentMonth.setMonth(this.currentMonth.getMonth() + 1);\n    this.generateCalendar();\n  }\n\n  isToday(date: Day): boolean {\n    const today = new Date();\n    return (\n      today.getDate() === date.date.getDate() &&\n      today.getMonth() === date.date.getMonth() &&\n      today.getFullYear() === date.date.getFullYear()\n    );\n  }\n\n  openDayModal(day: Day): void {\n    this.selectedDay = day;\n    this.modalService.open(document.getElementById('taskModal'), {\n      ariaLabelledBy: 'taskModalLabel',\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}