{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CreateNewTaskComponent = class CreateNewTaskComponent {\n  constructor(taskService, router, route) {\n    this.taskService = taskService;\n    this.router = router;\n    this.route = route;\n    this.formData = {\n      startDate: new Date(),\n      endDate: new Date(),\n      startHour: 0,\n      startMinute: 0,\n      duration: 0,\n      frequency: 'daily',\n      repeatInterval: 1\n    };\n    this.isEditMode = false;\n  }\n  ngOnInit() {\n    const taskId = this.route.snapshot.paramMap.get('id');\n    if (taskId) {\n      this.isEditMode = true;\n      this.loadTask(taskId);\n    }\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval\n      } = this.formData;\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n      const tasks = this.generateTasks(startDate, endDate, startTime, endTime, duration, repeatInterval);\n      tasks.forEach(task => {\n        this.taskService.createTask(task).subscribe({\n          next: response => {\n            console.log('Task created', response);\n          },\n          error: error => console.error('Error creating task', error)\n        });\n      });\n      this.router.navigate(['/tasks']);\n    }\n  }\n  formatTime(date) {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  formatDateToYYYYMMDD(date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  generateTasks(startDate, endDate, startTime, endTime, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n    while (currentDate <= end) {\n      console.log(this.formatDateToYYYYMMDD(currentDate));\n      tasks.push({\n        id: this.taskService.generateTaskId(),\n        startTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(startTime),\n        endTime: this.formatDateToYYYYMMDD(currentDate) + ' ' + this.formatTime(endTime),\n        duration: duration.toString() + ' min'\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    console.log('tasks', tasks);\n    return tasks;\n  }\n};\nCreateNewTaskComponent = __decorate([Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css']\n})], CreateNewTaskComponent);\nexport { CreateNewTaskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAajCC,YAAoBC,WAAwB,EAAUC,MAAc,EAASC,KAAqB;IAA9E,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAiB,UAAK,GAALC,KAAK;IAZlF,aAAQ,GAAG;MACTC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,OAAO,EAAE,IAAID,IAAI,EAAE;MACnBE,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE,OAAO;MAClBC,cAAc,EAAE;KACjB;IAED,eAAU,GAAG,KAAK;EAEmF;EACrGC,QAAQ;IACN,MAAMC,MAAM,GAAG,IAAI,CAACV,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACrD,IAAIH,MAAM,EAAE;MACV,IAAI,CAACI,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,QAAQ,CAACL,MAAM,CAAC;;EAEzB;EACAM,QAAQ,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,KAAK,EAAE;MACd,MAAM;QACJjB,SAAS;QACTE,OAAO;QACPC,SAAS;QACTC,WAAW;QACXC,QAAQ;QACRC,SAAS;QACTC;MAAc,CACf,GAAG,IAAI,CAACW,QAAQ;MAEjB,MAAMC,KAAK,GAAG,IAAIlB,IAAI,CAACD,SAAS,CAAC;MACjC,MAAMoB,SAAS,GAAG,IAAInB,IAAI,CAACkB,KAAK,CAAC;MACjCC,SAAS,CAACC,QAAQ,CAAClB,SAAS,CAAC;MAC7BiB,SAAS,CAACE,UAAU,CAAClB,WAAW,CAAC;MACjC,MAAMmB,OAAO,GAAG,IAAItB,IAAI,CAACmB,SAAS,CAAC;MACnCG,OAAO,CAACD,UAAU,CAACF,SAAS,CAACI,UAAU,EAAE,GAAGnB,QAAQ,CAAC;MAErD,MAAMoB,KAAK,GAAG,IAAI,CAACC,aAAa,CAC9B1B,SAAS,EACTE,OAAO,EACPkB,SAAS,EACTG,OAAO,EACPlB,QAAQ,EACRE,cAAc,CACf;MAEDkB,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAI;QACrB,IAAI,CAAC/B,WAAW,CAACgC,UAAU,CAACD,IAAI,CAAC,CAACE,SAAS,CAAC;UAC1CC,IAAI,EAAGC,QAAQ,IAAI;YACjBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,QAAQ,CAAC;UACvC,CAAC;UACDG,KAAK,EAAGA,KAAK,IAAKF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK;SAC7D,CAAC;MACJ,CAAC,CAAC;MACF,IAAI,CAACrC,MAAM,CAACsC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEAC,UAAU,CAACC,IAAU;IACnB,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAQ,EAAE,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACzD,MAAMC,OAAO,GAAGL,IAAI,CAACd,UAAU,EAAE,CAACiB,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC7D,OAAO,GAAGH,KAAK,IAAII,OAAO,EAAE;EAC9B;EAEAC,oBAAoB,CAACN,IAAU;IAC7BA,IAAI,GAAG,IAAIrC,IAAI,CAACqC,IAAI,CAAC;IACrB,MAAMO,IAAI,GAAGP,IAAI,CAACQ,WAAW,EAAE;IAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACV,IAAI,CAACW,QAAQ,EAAE,GAAG,CAAC,CAAC,CAACP,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMQ,GAAG,GAAGF,MAAM,CAACV,IAAI,CAACa,OAAO,EAAE,CAAC,CAACT,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAEnD,OAAO,GAAGG,IAAI,IAAIE,KAAK,IAAIG,GAAG,EAAE;EAClC;EACAxB,aAAa,CACX1B,SAAe,EACfE,OAAa,EACbkB,SAAe,EACfG,OAAa,EACblB,QAAgB,EAChB+C,WAAmB;IAEnB,MAAM3B,KAAK,GAAY,EAAE;IACzB,IAAI4B,WAAW,GAAG,IAAIpD,IAAI,CAACD,SAAS,CAAC;IACrC,IAAIsD,GAAG,GAAG,IAAIrD,IAAI,CAACC,OAAO,CAAC;IAE3B,OAAOmD,WAAW,IAAIC,GAAG,EAAE;MACzBrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACU,oBAAoB,CAACS,WAAW,CAAC,CAAC;MACnD5B,KAAK,CAAC8B,IAAI,CAAC;QACTC,EAAE,EAAE,IAAI,CAAC3D,WAAW,CAAC4D,cAAc,EAAE;QACrCrC,SAAS,EACP,IAAI,CAACwB,oBAAoB,CAACS,WAAW,CAAC,GACtC,GAAG,GACH,IAAI,CAAChB,UAAU,CAACjB,SAAS,CAAC;QAC5BG,OAAO,EACL,IAAI,CAACqB,oBAAoB,CAACS,WAAW,CAAC,GACtC,GAAG,GACH,IAAI,CAAChB,UAAU,CAACd,OAAO,CAAC;QAC1BlB,QAAQ,EAAEA,QAAQ,CAACoC,QAAQ,EAAE,GAAG;OACjC,CAAC;MACFY,WAAW,CAACK,OAAO,CAACL,WAAW,CAACF,OAAO,EAAE,GAAGC,WAAW,CAAC;;IAE1DnB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,KAAK,CAAC;IAC3B,OAAOA,KAAK;EACd;CACD;AA1GY9B,sBAAsB,eALlCD,SAAS,CAAC;EACTiE,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWlE,sBAAsB,CA0GlC;SA1GYA,sBAAsB","names":["Component","CreateNewTaskComponent","constructor","taskService","router","route","startDate","Date","endDate","startHour","startMinute","duration","frequency","repeatInterval","ngOnInit","taskId","snapshot","paramMap","get","isEditMode","loadTask","onSubmit","form","valid","formData","start","startTime","setHours","setMinutes","endTime","getMinutes","tasks","generateTasks","forEach","task","createTask","subscribe","next","response","console","log","error","navigate","formatTime","date","hours","getHours","toString","padStart","minutes","formatDateToYYYYMMDD","year","getFullYear","month","String","getMonth","day","getDate","repeatEvery","currentDate","end","push","id","generateTaskId","setDate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ITask } from 'src/interfaces/ITask';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent implements OnInit {\n  formData = {\n    startDate: new Date(),\n    endDate: new Date(),\n    startHour: 0,\n    startMinute: 0,\n    duration: 0,\n    frequency: 'daily',\n    repeatInterval: 1,\n  };\n\n  isEditMode = false;\n\n  constructor(private taskService: TaskService, private router: Router,private route: ActivatedRoute) {}\n  ngOnInit(): void {\n    const taskId = this.route.snapshot.paramMap.get('id');\n    if (taskId) {\n      this.isEditMode = true;\n      this.loadTask(taskId);\n    }\n  }\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const {\n        startDate,\n        endDate,\n        startHour,\n        startMinute,\n        duration,\n        frequency,\n        repeatInterval,\n      } = this.formData;\n\n      const start = new Date(startDate);\n      const startTime = new Date(start);\n      startTime.setHours(startHour);\n      startTime.setMinutes(startMinute);\n      const endTime = new Date(startTime);\n      endTime.setMinutes(startTime.getMinutes() + duration);\n\n      const tasks = this.generateTasks(\n        startDate,\n        endDate,\n        startTime,\n        endTime,\n        duration,\n        repeatInterval\n      );\n\n      tasks.forEach((task) => {\n        this.taskService.createTask(task).subscribe({\n          next: (response) => {\n            console.log('Task created', response);\n          },\n          error: (error) => console.error('Error creating task', error),\n        });\n      });\n      this.router.navigate(['/tasks']);\n    }\n  }\n\n  formatTime(date: Date): string {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n\n  formatDateToYYYYMMDD(date: Date) {\n    date = new Date(date);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n\n    return `${year}-${month}-${day}`;\n  }\n  generateTasks(\n    startDate: Date,\n    endDate: Date,\n    startTime: Date,\n    endTime: Date,\n    duration: number,\n    repeatEvery: number\n  ) {\n    const tasks: ITask[] = [];\n    let currentDate = new Date(startDate);\n    let end = new Date(endDate);\n\n    while (currentDate <= end) {\n      console.log(this.formatDateToYYYYMMDD(currentDate));\n      tasks.push({\n        id: this.taskService.generateTaskId(),\n        startTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(startTime),\n        endTime:\n          this.formatDateToYYYYMMDD(currentDate) +\n          ' ' +\n          this.formatTime(endTime),\n        duration: duration.toString() + ' min',\n      });\n      currentDate.setDate(currentDate.getDate() + repeatEvery);\n    }\n    console.log('tasks', tasks);\n    return tasks;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}