{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/tasks';\n  }\n  // Generate a task ID with three letters and an incrementing number\n  generateTaskId() {\n    const letters = 'ABC'; // Customize as needed\n    const idNumber = this.counter++;\n    const formattedIdNumber = idNumber.toString().padStart(4, '0'); // Ensure the number is padded to 4 digits\n    return `${letters}${formattedIdNumber}`;\n  }\n  getTasks() {\n    return this.http.get(this.apiUrl);\n  }\n  getTaskById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createTask(taskData) {\n    return this.http.post(this.apiUrl, taskData);\n  }\n  updateTask(id, taskData) {\n    return this.http.put(`${this.apiUrl}/${id}`, taskData);\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,iCAAiC;EACX;EAEtC;EACQC,cAAc;IACrB,MAAMC,OAAO,GAAG,KAAK,CAAC,CAAC;IACvB,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,EAAE;IAC/B,MAAMC,iBAAiB,GAAGF,QAAQ,CAACG,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAChE,OAAO,GAAGL,OAAO,GAAGG,iBAAiB,EAAE;EACzC;EAEAG,QAAQ;IACN,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAU,IAAI,CAACC,MAAM,CAAC;EAC5C;EAEAC,WAAW,CAACC,EAAU;IACpB,OAAO,IAAI,CAACZ,IAAI,CAACS,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACrD;EAEAC,UAAU,CAACC,QAAe;IACxB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,IAAI,CAACL,MAAM,EAAEI,QAAQ,CAAC;EAC9C;EAEAE,UAAU,CAACJ,EAAU,EAAEE,QAAe;IACpC,OAAO,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAQ,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC/D;EAAC;qBA1BUhB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAoB,SAAXpB,WAAW;IAAAqB,YAFV;EAAM","names":["TaskService","constructor","http","generateTaskId","letters","idNumber","counter","formattedIdNumber","toString","padStart","getTasks","get","apiUrl","getTaskById","id","createTask","taskData","post","updateTask","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ITask } from 'src/interfaces/ITask';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  private apiUrl = 'http://localhost:8080/api/tasks';\n  constructor(private http: HttpClient) {}\n\n   // Generate a task ID with three letters and an incrementing number\n   private generateTaskId(): string {\n    const letters = 'ABC'; // Customize as needed\n    const idNumber = this.counter++;\n    const formattedIdNumber = idNumber.toString().padStart(4, '0'); // Ensure the number is padded to 4 digits\n    return `${letters}${formattedIdNumber}`;\n  }\n  \n  getTasks(): Observable<ITask[]> {\n    return this.http.get<ITask[]>(this.apiUrl);\n  }\n\n  getTaskById(id: string) {\n    return this.http.get<ITask>(`${this.apiUrl}/${id}`);\n  }\n\n  createTask(taskData: ITask) {\n    return this.http.post(this.apiUrl, taskData);\n  }\n\n  updateTask(id: string, taskData: ITask) {\n    return this.http.put<ITask>(`${this.apiUrl}/${id}`, taskData);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}