{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class CreateNewTaskComponent {\n  constructor(taskService, router) {\n    this.taskService = taskService;\n    this.router = router;\n  }\n  onSubmit(form) {\n    if (form.valid) {\n      const formData = form.value;\n      const task = {\n        id: 'test',\n        startTime: formData.startDate,\n        endTime: formData.endDate,\n        duration: formData.duration\n        // repeat: formData.repeat\n      };\n\n      console.log(task);\n      this.taskService.createTask(task).subscribe({\n        next: response => {\n          console.log('Task created', response);\n          this.router.navigate(['/tasks']);\n        },\n        error: error => console.error('Error creating task', error)\n      });\n    }\n  }\n  addMinutes(date, minutes) {\n    const result = new Date(date);\n    result.setMinutes(result.getMinutes() + minutes);\n    return result;\n  }\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1, date2) {\n    return date1 < date2;\n  }\n  format(date, format) {\n    return dateFnsFormat(date, format);\n  }\n  generateTasks(startDate, endDate, startTimeParts, duration, repeatEvery) {\n    const tasks = [];\n    let currentDate = startDate;\n    while (this.isBefore(currentDate, endDate) || currentDate.toDateString() === endDate.toDateString()) {\n      const taskStartTime = new Date(currentDate);\n      taskStartTime.setHours(parseInt(startTimeParts[0]), parseInt(startTimeParts[1]), 0, 0);\n      const taskEndTime = this.addMinutes(taskStartTime, duration);\n      tasks.push({\n        id: `task${new Date().getTime()}`,\n        startTime: thisformat(taskStartTime, \"yyyy-MM-dd HH:mm\"),\n        endTime: format(taskEndTime, \"yyyy-MM-dd HH:mm\"),\n        duration: duration\n      });\n      currentDate = this.addDays(currentDate, repeatEvery); // Move to the next task date\n    }\n\n    return tasks;\n  }\n  static #_ = this.ɵfac = function CreateNewTaskComponent_Factory(t) {\n    return new (t || CreateNewTaskComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateNewTaskComponent,\n    selectors: [[\"app-create-new-task\"]],\n    decls: 52,\n    vars: 0,\n    consts: [[\"lang\", \"en\"], [\"charset\", \"UTF-8\"], [\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1.0\"], [\"href\", \"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\", \"rel\", \"stylesheet\"], [1, \"container\", \"mt-5\"], [1, \"form-group\"], [1, \"row\", \"mt-3\"], [\"for\", \"startDate\"], [1, \"col\"], [1, \"input-group\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", 1, \"form-control\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", 1, \"form-control\"], [\"type\", \"number\", \"id\", \"startHour\", \"name\", \"startHour\", \"placeholder\", \"HH\", \"min\", \"0\", \"max\", \"23\", 1, \"form-control\"], [\"type\", \"number\", \"id\", \"startMinute\", \"name\", \"startMinute\", \"placeholder\", \"MM\", \"min\", \"0\", \"max\", \"59\", 1, \"form-control\"], [\"for\", \"duration\"], [\"type\", \"number\", \"id\", \"duration\", \"name\", \"duration\", \"min\", \"1\", \"required\", \"\", 1, \"form-control\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [1, \"me-4\"], [1, \"form-check\", \"ml-3\"], [\"type\", \"radio\", \"id\", \"daily\", \"name\", \"frequency\", \"value\", \"daily\", \"checked\", \"\", 1, \"form-check-input\"], [\"for\", \"daily\", 1, \"form-check-label\"], [\"type\", \"radio\", \"id\", \"weekly\", \"name\", \"frequency\", \"value\", \"weekly\", 1, \"form-check-input\"], [\"for\", \"weekly\", 1, \"form-check-label\"], [\"for\", \"repeatInterval\"], [\"type\", \"number\", \"id\", \"repeatInterval\", \"name\", \"repeatInterval\", \"min\", \"1\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function CreateNewTaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\", 0)(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 1)(3, \"meta\", 2)(4, \"link\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"body\")(6, \"div\", 4)(7, \"h2\");\n        i0.ɵɵtext(8, \"Start time and Occurrences\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"form\")(10, \"div\", 5)(11, \"div\", 6)(12, \"label\", 7);\n        i0.ɵɵtext(13, \"Enter a date range\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 8)(15, \"div\", 9);\n        i0.ɵɵelement(16, \"input\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 8);\n        i0.ɵɵelement(18, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 8)(20, \"div\", 9);\n        i0.ɵɵelement(21, \"input\", 12)(22, \"input\", 13);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(23, \"div\", 5)(24, \"label\", 14);\n        i0.ɵɵtext(25, \"Duration\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 9);\n        i0.ɵɵelement(27, \"input\", 15);\n        i0.ɵɵelementStart(28, \"div\", 16)(29, \"span\", 17);\n        i0.ɵɵtext(30, \"minutes\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(31, \"div\", 5)(32, \"label\", 18);\n        i0.ɵɵtext(33, \"Frequency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 19);\n        i0.ɵɵelement(35, \"input\", 20);\n        i0.ɵɵelementStart(36, \"label\", 21);\n        i0.ɵɵtext(37, \"Daily\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"div\", 19);\n        i0.ɵɵelement(39, \"input\", 22);\n        i0.ɵɵelementStart(40, \"label\", 23);\n        i0.ɵɵtext(41, \"Weekly\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(42, \"div\", 5)(43, \"label\", 24);\n        i0.ɵɵtext(44, \"Repeat every\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"div\", 9);\n        i0.ɵɵelement(46, \"input\", 25);\n        i0.ɵɵelementStart(47, \"div\", 16)(48, \"span\", 17);\n        i0.ɵɵtext(49, \"days\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(50, \"button\", 26);\n        i0.ɵɵtext(51, \"Submit\");\n        i0.ɵɵelementEnd()()()()();\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["CreateNewTaskComponent","constructor","taskService","router","onSubmit","form","valid","formData","value","task","id","startTime","startDate","endTime","endDate","duration","console","log","createTask","subscribe","next","response","navigate","error","addMinutes","date","minutes","result","Date","setMinutes","getMinutes","addDays","days","setDate","getDate","isBefore","date1","date2","format","dateFnsFormat","generateTasks","startTimeParts","repeatEvery","tasks","currentDate","toDateString","taskStartTime","setHours","parseInt","taskEndTime","push","getTime","thisformat","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.ts","C:\\Users\\fardo\\scheduler_manager\\src\\app\\components\\tasks\\create-new-task\\create-new-task.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { TaskService } from 'src/services/task.service';\n\n@Component({\n  selector: 'app-create-new-task',\n  templateUrl: './create-new-task.component.html',\n  styleUrls: ['./create-new-task.component.css'],\n})\nexport class CreateNewTaskComponent {\n  constructor(private taskService: TaskService, private router: Router) {}\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      const formData = form.value;\n      const task = {\n        id: 'test',\n        startTime: formData.startDate,\n        endTime: formData.endDate,\n        duration: formData.duration,\n        // repeat: formData.repeat\n      };\n      console.log(task);\n      this.taskService.createTask(task).subscribe({\n        next: (response) => {\n          console.log('Task created', response);\n          this.router.navigate(['/tasks']);\n        },\n        error: (error) => console.error('Error creating task', error),\n      });\n    }\n  }\n\n  addMinutes(date: Date, minutes: number): Date {\n    const result = new Date(date);\n    result.setMinutes(result.getMinutes() + minutes);\n    return result;\n  }\n  addDays(date: Date, days: number): Date {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n  isBefore(date1: Date, date2: Date): boolean {\n    return date1 < date2;\n  }\n  format(date: Date, format: string): string {\n    return dateFnsFormat(date, format);\n  }\n  private generateTasks(startDate: Date, endDate: Date, startTimeParts: string[], duration: number, repeatEvery: number) {\n    const tasks = [];\n    let currentDate = startDate;\n\n    while (this.isBefore(currentDate, endDate) || currentDate.toDateString() === endDate.toDateString()) {\n      const taskStartTime = new Date(currentDate);\n      taskStartTime.setHours(parseInt(startTimeParts[0]), parseInt(startTimeParts[1]), 0, 0);\n\n      const taskEndTime = this.addMinutes(taskStartTime, duration);\n\n      tasks.push({\n        id: `task${new Date().getTime()}`, // Generate a unique ID\n        startTime: thisformat(taskStartTime, \"yyyy-MM-dd HH:mm\"),\n        endTime: format(taskEndTime, \"yyyy-MM-dd HH:mm\"),\n        duration: duration\n      });\n\n      currentDate = this.addDays(currentDate, repeatEvery); // Move to the next task date\n    }\n\n    return tasks;\n  }\n}\n","<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n      rel=\"stylesheet\"\n    />\n  </head>\n  <body>\n    <div class=\"container mt-5\">\n      <h2>Start time and Occurrences</h2>\n      <form>\n        <div class=\"form-group\">\n          <div class=\"row mt-3\">\n            <label for=\"startDate\">Enter a date range</label>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  class=\"form-control\"\n                />\n              </div>\n            </div>\n\n            <div class=\"col\">\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                name=\"endDate\"\n                class=\"form-control\"\n              />\n            </div>\n            <div class=\"col\">\n              <div class=\"input-group\">\n                <input\n                  type=\"number\"\n                  id=\"startHour\"\n                  name=\"startHour\"\n                  class=\"form-control\"\n                  placeholder=\"HH\"\n                  min=\"0\"\n                  max=\"23\"\n                />\n                <input\n                  type=\"number\"\n                  id=\"startMinute\"\n                  name=\"startMinute\"\n                  class=\"form-control\"\n                  placeholder=\"MM\"\n                  min=\"0\"\n                  max=\"59\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"duration\">Duration</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"duration\"\n              name=\"duration\"\n              class=\"form-control\"\n              min=\"1\"\n              required\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">minutes</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label class=\"me-4\">Frequency</label>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"daily\"\n              name=\"frequency\"\n              value=\"daily\"\n              class=\"form-check-input\"\n              checked\n            />\n            <label for=\"daily\" class=\"form-check-label\">Daily</label>\n          </div>\n          <div class=\"form-check ml-3\">\n            <input\n              type=\"radio\"\n              id=\"weekly\"\n              name=\"frequency\"\n              value=\"weekly\"\n              class=\"form-check-input\"\n            />\n            <label for=\"weekly\" class=\"form-check-label\">Weekly</label>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"repeatInterval\">Repeat every</label>\n          <div class=\"input-group\">\n            <input\n              type=\"number\"\n              id=\"repeatInterval\"\n              name=\"repeatInterval\"\n              class=\"form-control\"\n              min=\"1\"\n            />\n            <div class=\"input-group-append\">\n              <span class=\"input-group-text\">days</span>\n            </div>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n  </body>\n</html>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}